import GoogleProvider from "next-auth/providers/google";
import FacebookProvider from "next-auth/providers/facebook";
import CredentialsProvider from "next-auth/providers/credentials";
import prisma from "@lib/db";
export const options = {
	providers: [
		CredentialsProvider({
			name: "Credentials",
			credentials: {
				emailOrPhoneNumber: {
					label: "Email or Phone number:",
					type: "text",
				},
				password: {
					label: "Password:",
					type: "password",
				},
			},
			async authorize(credentials) {
				try {
					const userFound = await prisma.account.findFirst({
						where: {
							OR: [
								{
									email: credentials.emailOrPhoneNumber,
									password: credentials.password,
								},
								{
									phoneNumber: credentials.emailOrPhoneNumber,
									password: credentials.password,
								},
							],
						},
					});

					if (userFound) {
						userFound["role"] = userFound.role;
						return userFound; //authenticated
					}
				} catch (error) {
					console.log(error);
				}
				return null; //no authentication going to happen
			},
		}),
		GoogleProvider({
			profile(profile) {
				console.log("Profile: ", profile);
				let userRole = "USER";

				if (profile?.email == "comillasjin20@gmail.com") {
					userRole = "ADMIN";
				}

				return {
					...profile,
					id: profile.sub,
					role: userRole,
					image: profile.picture,
				};
			},
			clientId: process.env.GOOGLE_ID,
			clientSecret: process.env.GOOGLE_SECRET,
		}),
	],
	callbacks: {
		async jwt({ token, user }) {
			if (user) {
				token.role = user.role;
				token.image = user.image;
			}
			return token;
		},
		async session({ session, token }) {
			if (session?.user) {
				session.user.role = token.role;
				session.user.image = token.image;
			}
			return session;
		},
	},
};
