// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}
// customer's reservation table
model Reservations {
  id            Int               @id @default(autoincrement())
  eventDate     DateTime
  reservedAt    DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  userID        Int
  user          Account           @relation(fields: [userID], references: [id])
  totalPrice    Float
  status        ReservationStatus @default(PENDING)
  eventDuration Int
  orders        Dish[]            @relation("ReservationsDishes")
}

enum ReservationStatus {
  ACCEPTED
  PENDING
  DENIED
}

model Dish {
  id          Int            @id @default(autoincrement())
  name        String         @unique @db.VarChar(50)
  categoryID  Int
  category    Category       @relation(fields: [categoryID], references: [id], onDelete: Cascade)
  courseID    Int
  course      Course         @relation(fields: [courseID], references: [id], onDelete: Cascade)
  subSet      SubSet[]       @relation("DishSubSets")
  orders      Reservations[] @relation("ReservationsDishes")
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  isAvailable Boolean
  imgHref     String?
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(50)
  dish Dish[]
}

model Course {
  id      Int      @id @default(autoincrement())
  name    String   @unique @db.VarChar(50)
  dish    Dish[]
  subsets SubSet[]
}

model Set {
  id             Int      @id @default(autoincrement())
  name           String   @unique @db.VarChar(50)
  description String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  subSets        SubSet[]
  minimumPerHead Int
  price          Float
}

//to allow merging of categories like "Fish/Canton/Vegetable" in the menu/set
model SubSet {
  id                Int    @id @default(autoincrement())
  name              String @db.VarChar(50)
  setID             Int
  set               Set    @relation(fields: [setID], references: [id], onDelete: Cascade)
  dishes            Dish[] @relation("DishSubSets")
  courseID          Int
  course            Course @relation(fields: [courseID], references: [id], onDelete: Cascade)
  selectionQuantity Int    @default(1) //0 means all dishes are compulsory

  @@map("SubSets")
  @@unique([name, setID])
}

model Account {
  id           Int             @id @default(autoincrement())
  name         String          @unique
  email        String?         @unique @db.VarChar(50)
  phoneNumber  String?         @unique @db.VarChar(11)
  password     String          @db.Text
  role         Role            @default(USER)
  image        String?
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  preference   UserPreference?
  reservations Reservations[]
}

enum Role {
  USER
  ADMIN
}

model UserPreference {
  id        Int     @id @default(autoincrement())
  account   Account @relation(fields: [accountID], references: [id])
  accountID Int     @unique
  darkMode  Boolean
}

model AdminSettings{
  id Int @id @default(autoincrement())
  openingTime String
  closingTime String
  minimumCustomerReservationHours Int
  maximumCustomerReservationHours Int
  defaultMinimumPerHead Int
  maintainanceDates MaintainanceDates[]
}

model MaintainanceDates {
  id Int @id @default(autoincrement())
  date DateTime
  adminSettingsID Int @unique
  adminSettings AdminSettings @relation(fields:[adminSettingsID], references: [id])
}

model OtherServices {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(50)
  price Float
}
