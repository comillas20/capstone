// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// customer's reservation table
model Transactions {
  id            String       @id @default(uuid())
  paymentID     String       @db.Text
  createdAt     DateTime     @default(now())
  netAmount     Float
  fee           Float
  message       String?
  reservationID String
  reservation   Reservations @relation(fields: [reservationID], references: [id], onDelete: Cascade)
}

enum ReservationStatus {
  ONGOING
  CANCELED
}

model Reservations {
  id            String            @id @default(uuid())
  userID        Int
  user          Account           @relation(fields: [userID], references: [id])
  transactions  Transactions[]
  status        ReservationStatus @default(ONGOING)
  setName       String
  totalCost     Float
  dishes        String[]
  eventDuration Int
  eventDate     DateTime
  eventType     String
}

model Venues {
  id          Int    @id @default(autoincrement())
  name        String
  location    String
  freeHours   Int
  venueCost   Float
  maxCapacity Int
  sets        Set[]
}

model Dish {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(50)
  categoryID  Int
  category    Category  @relation(fields: [categoryID], references: [id], onDelete: Cascade)
  subSet      SubSets[] @relation("DishSubSets")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  isAvailable Boolean   @default(false)
  imgHref     String?
}

model Category {
  id       Int    @id @default(autoincrement())
  name     String @unique @db.VarChar(50)
  dishes   Dish[]
  courseID Int
  course   Course @relation(fields: [courseID], references: [id], onDelete: Cascade)
}

model Course {
  id         Int        @id @default(autoincrement())
  name       String     @unique @db.VarChar(50)
  subSets    SubSets[]
  categories Category[]
}

model Set {
  id                Int       @id @default(autoincrement())
  name              String    @unique @db.VarChar(50)
  description       String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  subSets           SubSets[]
  venueID           Int
  venue             Venues    @relation(fields: [venueID], references: [id], onDelete: Cascade)
  minimumPerHead    Int
  price             Float
  selectionQuantity Int
}

//to allow merging of categories like "Fish/Canton/Vegetable" in the menu/set
model SubSets {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(50)
  setID    Int
  set      Set    @relation(fields: [setID], references: [id], onDelete: Cascade)
  dishes   Dish[] @relation("DishSubSets")
  courseID Int
  course   Course @relation(fields: [courseID], references: [id], onDelete: Cascade)

  @@unique([name, setID])
}

model Account {
  id              Int            @id @default(autoincrement())
  name            String         @unique
  phoneNumber     String         @unique @db.VarChar(13) // +639xxxxxxxx
  password        String         @db.Text
  role            Role           @default(USER)
  image           String?
  createdAt       DateTime       @default(now())
  code            String?
  codeTimeStamp   DateTime?
  resendTimeStamp DateTime?
  reservations    Reservations[]
}

enum Role {
  USER
  ADMIN
}

model SystemSettings {
  name  String            @id
  type  SettingValueTypes
  value String
}

enum SettingValueTypes {
  int
  float
  string
  date
}

model MaintainanceDates {
  date DateTime @id
}

model FAQ {
  id       Int    @id @default(autoincrement())
  question String @unique
  answer   String @db.Text
}

model OtherServices {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(50)
  price       Float
  unit        Int?
  unitName    String?
  isRequired  Boolean @default(false)
  isAvailable Boolean @default(false)
}
