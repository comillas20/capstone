// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Reservations {
  id         Int      @id @default(autoincrement())
  date       DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userID     String
  totalPrice Float
}

model Orders {
  id   Int    @id @default(autoincrement())
  dish Dish[] @relation("OrderDishes")
}

model Dish {
  id          Int      @id @default(autoincrement())
  name        String   @unique @db.VarChar(50)
  categoryID  Int
  category    Category @relation(fields: [categoryID], references: [id], onDelete: Cascade)
  courseID    Int
  course      Course   @relation(fields: [courseID], references: [id], onDelete: Cascade)
  subSet      SubSet[] @relation("DishSubSets")
  orders      Orders[] @relation("OrderDishes")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isAvailable Boolean
  price       Float
  imgHref     String?
}

model Category {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(50)
  dish Dish[]
}

model Course {
  id      Int      @id @default(autoincrement())
  name    String   @db.VarChar(50) @unique
  dish    Dish[]
  subsets SubSet[]
}

model Set {
  id        Int      @id @default(autoincrement())
  name      String   @db.VarChar(50) @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subSets   SubSet[]
}

//to allow merging of categories like "Fish/Canton/Vegetable" in the menu/set
model SubSet {
  id       Int    @id @default(autoincrement())
  name     String @db.VarChar(50)
  setID    Int
  set      Set    @relation(fields: [setID], references: [id], onDelete: Cascade)
  dishes   Dish[] @relation("DishSubSets")
  courseID Int
  course   Course @relation(fields: [courseID], references: [id], onDelete: Cascade)

  @@map("SubSets")
}

model User {
  id           Int            @id @default(autoincrement())
  username     String         @db.VarChar(50) @unique
  password     String         @db.VarChar(50)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  preferenceID Int
  preference   UserPreference @relation(fields: [preferenceID], references: [id])
}

model UserPreference {
  id       Int     @id @default(autoincrement())
  user     User[]
  darkMode Boolean
}

model OtherServices {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(50)
  price Float
}
